---
name: Build Project
description: Reusable steps for building the project
inputs:
  source_dir:
    description: Source directory for CMake
    required: false
    # github.workspace does not work in containers:
    # https://github.com/actions/runner/issues/2058
    default: "${{ github.workspace }}"
  build_dir:
    description: Build directory for CMake
    required: false
    # github.workspace does not work in containers:
    # https://github.com/actions/runner/issues/2058
    default: "${{ github.workspace }}/build"
  os:
    description: The operating system (required to distinguish the coverage reports)
    required: true
  cpp_compiler:
    description: The C++ compiler
    required: true
  build_type:
    description: The CMake build type (Debug or Release)
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash
      run: >
        cmake -B ${{ inputs.build_dir }}
        -DCMAKE_CXX_COMPILER=${{ inputs.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
        -S ${{ inputs.source_dir }}

    - name: Ensure llvm-cov is found in path
      shell: bash
      run: |
        echo "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin" >> $GITHUB_PATH

    - name: Verify llvm-cov location
      shell: bash
      run: which llvm-cov && llvm-cov --version

    - name: Build
      shell: bash
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ inputs.build_dir }} --config ${{ inputs.build_type }}
        if [[ "${{ inputs.build_type }}" == "Debug" ]]; then
          cmake --build ${{ inputs.build_dir }} --config ${{ inputs.build_type }} -t coverage
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ inputs.os }}-${{ inputs.cpp_compiler }}
        path: "${{ inputs.build_dir }}/coverage"
        retention-days: 7 # Keep artifacts for 7 days
        if-no-files-found: ignore

    - name: Test
      working-directory: ${{ inputs.build_dir }}
      shell: bash
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ inputs.build_type }}
